
(in-microtheory EscapeMt)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;FETCH-Accessible
(preconditionForMethod
      (and
	(accessible ?obj ?mt)
	(isa ?obj keyOfLock))    
 (methodForAction
  (fetch ?obj ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
     (escape ?obj ?mt))
))))

;;;;FETCH-NotAccessible
(preconditionForMethod
      (and
	(notAccessible ?obj ?mt)
	(isa ?obj keyOfLock)
	(ist-Information ?mt (inContainer ?obj ?container)))            
 (methodForAction
  (fetch ?obj ?mt)
  (actionSequence
   (TheList
    (doAgentPlan
     (breakContainer ?container ?poundTool ?mt))
))))

;;;BREAK CONTAINER
(preconditionForMethod
      (and
	(ist-Information ?mt (isa ?container Container))
	(ist-Information ?mt (isa ?poundTool PoundingDrivingImplement))
  (ist-Information ?mt (inContainer ?obj ?container))
	(accessible ?container ?mt)
	(accessible ?poundTool ?mt)
 )            
 (methodForAction
     (breakContainer ?container ?poundTool ?mt)
  (actionSequence
   (TheList
	(doRecord (ist-Information MyEscapePlanMt (breakContainer ?container ?poundTool)))
  
  ;;;update the state of the world 
	(doRecord (ist-Information ?mt (onTable ?obj)))   
   (doAgentPlan
     (fetch ?obj ?mt))
))))


;;;ESCAPE = win!
(preconditionForMethod
      (and (true))            
(methodForAction
  (escape ?obj ?mt)
  (actionSequence
   (TheList
    (doRecord (ist-Information MyEscapePlanMt (escape ?obj ?mt)))
))))

